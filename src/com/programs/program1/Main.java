package com.programs.program1;

import java.util.HashMap;
import javax.swing.JOptionPane;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author User
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        Morze = new javax.swing.JRadioButton();
        Cezar = new javax.swing.JRadioButton();
        Vidzener = new javax.swing.JRadioButton();
        XOR = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        Ecription = new javax.swing.JRadioButton();
        Decription = new javax.swing.JRadioButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton1.setText("Вихід");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        jLabel1.setText("Тип шифрування:");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Morze.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        Morze.setText("Морзе");
        Morze.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MorzeActionPerformed(evt);
            }
        });

        Cezar.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        Cezar.setText("Шифр Цезаря");
        Cezar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CezarActionPerformed(evt);
            }
        });

        Vidzener.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        Vidzener.setText("Шифр Віженара");
        Vidzener.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VidzenerActionPerformed(evt);
            }
        });

        XOR.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        XOR.setText("Шифр XOR");
        XOR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                XORActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel2.setText("зміщення(число)");

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel3.setText("ключ(слово)");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel4.setText("ключ(символ)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Morze)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(Vidzener)
                                                                        .addComponent(XOR))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jLabel4)
                                                                        .addComponent(jLabel3))
                                                                .addGap(0, 9, Short.MAX_VALUE))
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addComponent(Cezar)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(jLabel2)))
                                                .addGap(18, 18, 18)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(Morze)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(Cezar)
                                        .addComponent(jLabel2)
                                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(Vidzener)
                                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(XOR)
                                        .addComponent(jLabel4)
                                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(36, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Ecription.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        Ecription.setSelected(true);
        Ecription.setText("Шифрування");
        Ecription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EcriptionActionPerformed(evt);
            }
        });

        Decription.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        Decription.setText("Дешифрування");
        Decription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecriptionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(Ecription)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 123, Short.MAX_VALUE)
                                .addComponent(Decription)
                                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(Ecription)
                                        .addComponent(Decription))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTextField1.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentRemoved(java.awt.event.ContainerEvent evt) {
                jTextField1ComponentRemoved(evt);
            }
        });
        jTextField1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                jTextField1AncestorRemoved(evt);
            }
        });
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jButton2.setText("Зашифрувати");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel1))
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(32, 32, 32)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(182, 182, 182)
                                                                .addComponent(jButton2))))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(373, 373, 373)
                                                .addComponent(jButton1)))
                                .addContainerGap(105, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addGap(26, 26, 26)
                                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                                                .addComponent(jButton1)
                                                .addContainerGap())
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(jButton2)
                                                                .addGap(142, 142, 142))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(46, 46, 46)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );

        pack();
    }// </editor-fold>

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        System.exit(0);
    }

    private void EcriptionActionPerformed(java.awt.event.ActionEvent evt) {
        if(Ecription.isSelected()){
            jButton2.setText("Зашифрувати");
            Decription.setSelected(false);
        }
    }



    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {
       /* if(Morze.isSelected()){
            jTextField1.getDocument().addDocumentListener(new DocumentListener(){});
        }    */
    }

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {

        String str = jTextField1.getText();
        Cheking ch1 = new Cheking();
        String strNum = jTextField3.getText();
        String strKeyWord = jTextField4.getText();
        if(Morze.isSelected()){
            Morze m1 = new Morze();

            if(Ecription.isSelected()){

                if(ch1.Morze(str, 'e')){
                    m1.Encryption();
                }
                else{
                    JOptionPane.showMessageDialog(null, "Ошибка ввода");
                }
            }
            if(Decription.isSelected() == true){
                if(ch1.Morze(str, 'd')){
                    m1.Decryption();
                }
                else{
                    JOptionPane.showMessageDialog(null, "Ошибка ввода");
                }
            }

        }

        if (Cezar.isSelected()){
            Cezar c1 = new Cezar();
            if(Ecription.isSelected()){
                if(ch1.Cezar(str) && ch1.isNumeric(strNum)){
                    c1.Encryption();
                }
                else{
                    JOptionPane.showMessageDialog(null, "Ошибка ввода");
                }
            }
            if(Decription.isSelected()){
                if(ch1.Cezar(str)&& ch1.isNumeric(strNum)){
                    c1.Decryption();
                }
                else{
                    JOptionPane.showMessageDialog(null, "Ошибка ввода");
                }
            }
        }
        if (Vidzener.isSelected()){
            Vidzener v1 = new Vidzener();
            if(Ecription.isSelected()){
                if(ch1.Vidzener(str, strKeyWord)){
                    v1.Encryption();
                }
                else{
                    JOptionPane.showMessageDialog(null, "Ошибка ввода");
                }
            }
            if(Decription.isSelected()){
                {
                    if(ch1.Vidzener(str, strKeyWord)){
                        v1.Decryption();
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Ошибка ввода");
                    }
                }
            }
        }
        if (XOR.isSelected()){
            XOR x1 = new XOR();
            if(Ecription.isSelected()){
                if(ch1.XOR(str)){
                    x1.Encryption();
                }
                else{
                    JOptionPane.showMessageDialog(null, "Ошибка ввода");
                }
            }
            if(Decription.isSelected()){
                x1.Decryption();
            }
        }

    }

    private void DecriptionActionPerformed(java.awt.event.ActionEvent evt) {
        if(Decription.isSelected()){
            jButton2.setText("Розшифрувати");
            Ecription.setSelected(false);
        }
    }

    private void MorzeActionPerformed(java.awt.event.ActionEvent evt) {
        if(Morze.isSelected()){
            Cezar.setSelected(false);
            Vidzener.setSelected(false);
            XOR.setSelected(false);
        }
    }

    private void CezarActionPerformed(java.awt.event.ActionEvent evt) {
        if(Cezar.isSelected()){
            Morze.setSelected(false);
            Vidzener.setSelected(false);
            XOR.setSelected(false);
        }
    }

    private void VidzenerActionPerformed(java.awt.event.ActionEvent evt) {
        if(Vidzener.isSelected()){
            Morze.setSelected(false);
            Cezar.setSelected(false);
            XOR.setSelected(false);
        }
    }

    private void XORActionPerformed(java.awt.event.ActionEvent evt) {
        if(XOR.isSelected()){
            Morze.setSelected(false);
            Cezar.setSelected(false);
            Vidzener.setSelected(false);
        }
    }

    private void jTextField1AncestorRemoved(javax.swing.event.AncestorEvent evt) {
        // TODO add your handling code here:
    }

    private void jTextField1ComponentRemoved(java.awt.event.ContainerEvent evt) {
        // TODO add your handling code here:
    }

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }





    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });

    }

    abstract class Shifr{
        abstract public void Encryption();
        abstract public void Decryption();
        public String GetText(){
            String text = jTextField1.getText();
            return text;
        }
        public void SetText(String text){
            jTextField2.setText(text);
        }
    }
    public class Morze extends Shifr{
        public void Encryption(){
            HashMap<Character, String> EnCod = new HashMap<Character, String>();
            EnCod.put('A', "*-");
            EnCod.put('B',"-***");
            EnCod.put('C',"-*-*");
            EnCod.put('D',"-**");
            EnCod.put('E',"*");
            EnCod.put('F',"**-*");
            EnCod.put('G',"--*");
            EnCod.put('H',"****");
            EnCod.put('I',"**");
            EnCod.put('J',"*---");
            EnCod.put('K',"-*-");
            EnCod.put('L',"*-**");
            EnCod.put('M',"--");
            EnCod.put('N',"-*");
            EnCod.put('O',"---");
            EnCod.put('P',"*--*");
            EnCod.put('Q',"--*-");
            EnCod.put('R',"*-*");
            EnCod.put('S',"***");
            EnCod.put('T',"-");
            EnCod.put('U',"**-");
            EnCod.put('V', "***-");
            EnCod.put('W', "*--");
            EnCod.put('X', "-**-");
            EnCod.put('Y', "-*--");
            EnCod.put('Z', "--**");
            EnCod.put('a', "*-");
            EnCod.put('b',"-***");
            EnCod.put('c',"-*-*");
            EnCod.put('d',"-**");
            EnCod.put('e',"*");
            EnCod.put('f',"**-*");
            EnCod.put('g',"--*");
            EnCod.put('h',"****");
            EnCod.put('i',"**");
            EnCod.put('j',"*---");
            EnCod.put('k',"-*-");
            EnCod.put('l',"*-**");
            EnCod.put('m',"--");
            EnCod.put('n',"-*");
            EnCod.put('o',"---");
            EnCod.put('p',"*--*");
            EnCod.put('q',"--*-");
            EnCod.put('r',"*-*");
            EnCod.put('s',"***");
            EnCod.put('t',"-");
            EnCod.put('u',"**-");
            EnCod.put('v', "***-");
            EnCod.put('w', "*--");
            EnCod.put('x', "-**-");
            EnCod.put('y', "-*--");
            EnCod.put('z', "--**");
            String word = GetText();
            char [] strToArray = word.toCharArray();
            String cod = "";
            for (int i = 0; i < strToArray.length; i++){
                cod+=(EnCod.get(strToArray[i]) + " ");
            }
            SetText(cod);
        }
        public void Decryption(){
            HashMap<String, Character> EnDecod = new HashMap<String, Character>();
            EnDecod.put("*-", 'A');
            EnDecod.put("-***", 'B');
            EnDecod.put("-*-*", 'C');
            EnDecod.put("-**", 'D');
            EnDecod.put("*", 'E');
            EnDecod.put("**-*", 'F');
            EnDecod.put("--*", 'G');
            EnDecod.put("****", 'H');
            EnDecod.put("**", 'I');
            EnDecod.put("*---", 'J');
            EnDecod.put("-*-", 'K');
            EnDecod.put("*-**", 'L');
            EnDecod.put("--", 'M');
            EnDecod.put("-*", 'N');
            EnDecod.put("---", 'O');
            EnDecod.put("*--*", 'P');
            EnDecod.put("--*-", 'Q');
            EnDecod.put("*-*", 'R');
            EnDecod.put("***", 'S');
            EnDecod.put("-", 'T');
            EnDecod.put("**-", 'U');
            EnDecod.put("***-", 'V');
            EnDecod.put("*--", 'W');
            EnDecod.put("-**-", 'X');
            EnDecod.put("-*--", 'Y');
            EnDecod.put("--**", 'Z');
            String word = GetText();
            String[] subStr;
            subStr = word.split(" ");
            String decod = "";
            for (int i = 0; i < subStr.length; i++ ){
                decod+=(EnDecod.get(subStr[i]));
            }
            SetText(decod);
        }
    }

    public class Cezar extends Shifr{
        public void Encryption(){
            String text = GetText();
            int s = Integer.parseInt(jTextField3.getText());
            StringBuffer result= new StringBuffer();

            for (int i=0; i<text.length(); i++)
            {
                if (Character.isUpperCase(text.charAt(i)))
                {
                    char ch = (char) (((int)text.charAt(i) +
                            s - 65) % 26 + 65);
                    result.append(ch);
                }
                else
                {
                    char ch = (char)(((int)text.charAt(i) +
                            s - 97) % 26 + 97);
                    result.append(ch);
                }
            }
            SetText(result.toString());
        }
        public void Decryption(){
            String text = GetText();
            int s = 26 - Integer.parseInt(jTextField3.getText());
            StringBuffer result= new StringBuffer();

            for (int i=0; i<text.length(); i++)
            {
                if (Character.isUpperCase(text.charAt(i)))
                {
                    char ch = (char) (((int)text.charAt(i) +
                            s - 65) % 26 + 65);
                    result.append(ch);
                }
                else
                {
                    char ch = (char)(((int)text.charAt(i) +
                            s - 97) % 26 + 97);
                    result.append(ch);
                }
            }
            SetText(result.toString());
        }
    }

    public class Vidzener extends Shifr{
        public String GenerateKey(String text, String key){
            int x = text.length();
            if(text.length()>=key.length()){
                for (int i = 0; ; i++)
                {
                    if (x == i)
                        i = 0;
                    if (key.length() == text.length())
                        break;
                    key+=(key.charAt(i));
                }}
            else {
                key = key.substring(0, text.length());
            }
            return key;
        }
        public void Encryption(){
            String text = GetText();
            text = text.toUpperCase();
            String key = jTextField4.getText();
            key = key.toUpperCase();
            key = GenerateKey(text, key);
            String cryptedText="";

            for (int i = 0; i < text.length(); i++)
            {

                int x = (text.charAt(i) + key.charAt(i)) %26 + 65;

                cryptedText+=(char)(x);
            }

            SetText(cryptedText);
        }
        public void Decryption(){
            String text = GetText();
            text = text.toUpperCase();
            String key = jTextField4.getText();
            key = key.toUpperCase();
            key = GenerateKey(text, key);
            String decryptedText="";
            for (int i = 0 ; i < text.length() &&
                    i < key.length(); i++)
            {

                int x = (text.charAt(i) - key.charAt(i) + 26) %26 + 65;

                decryptedText+=(char)(x);
            }
            SetText(decryptedText);
        }
    }

    public class XOR extends Shifr{

        public void Encryption() {
            String Key = jTextField5.getText();
            String text = GetText();
            char[] key = Key.toCharArray();
            char xorKey = key[0];
            String outputString = "";
            int len = text.length();
            for (int i = 0; i < len; i++)
            {
                outputString = outputString +
                        Character.toString((char) (text.charAt(i) ^ xorKey));
            }
            SetText(outputString);
        }
        public void Decryption() {
            String Key = jTextField5.getText();
            String text = GetText();
            char[] key = Key.toCharArray();
            char xorKey = key[0];
            String outputString = "";
            int len = text.length();
            for (int i = 0; i < len; i++)
            {
                outputString = outputString +
                        Character.toString((char) (text.charAt(i) ^ xorKey));
            }
            SetText(outputString);
        }
    }

    public class Cheking{
        public boolean Morze(String text, char shifr){
            boolean rez = true;
            switch(shifr){
                case 'd':
                    for(int i = 0; i < text.length(); i++){
                        if(text.charAt(i) == '*' || text.charAt(i) == '-' || text.charAt(i) == ' '){
                            rez = true;
                        }

                        else{
                            rez = false;}


                    }
                    break;
                case 'e':
                    rez = text.matches("[a-zA-Z]+");
                    break;
            }

            return rez;
        }

        public boolean Cezar(String text){
            boolean rez = true;
            rez = text.matches("[a-zA-Z]+");
            return rez;
        }
        public  boolean isNumeric(String strNum) {
            try {
                double d = Double.parseDouble(strNum);
            } catch (NumberFormatException | NullPointerException nfe) {
                return false;
            }
            return true;
        }
        public boolean Vidzener(String text, String keyword){
            boolean rez = true;
            if(text.matches("[a-zA-Z]+") && keyword.matches("[a-zA-Z]+")){
                rez = true;
            }
            else{
                rez = false;
            }
            return rez;
        }

        public boolean XOR(String text){
            boolean rez = true;
            rez = text.matches("[a-zA-Z]+");
            return rez;
        }
    }

    // Variables declaration - do not modify
    private javax.swing.JRadioButton Cezar;
    private javax.swing.JRadioButton Decription;
    private javax.swing.JRadioButton Ecription;
    private javax.swing.JRadioButton Morze;
    private javax.swing.JRadioButton Vidzener;
    private javax.swing.JRadioButton XOR;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration
}
